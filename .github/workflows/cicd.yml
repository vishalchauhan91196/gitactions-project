name: Java CI/CD Pipeline with Security Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '11'
  DISTRO: 'temurin'
  ARTIFACT_NAME: 'MyWebApp'
  JAR_PATH: 'target/*.jar'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRO }}
          cache: maven

      - name: Build, Compile, and Test
        run: mvn -B clean verify --file pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.JAR_PATH }}

  security-gitleaks:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      - name: Install & Run Gitleaks
        run: |
          sudo apt-get update
          sudo apt-get install -y gitleaks
          gitleaks detect --source . --report-format json --report-path=gitleaks-report.json

  security-snyk:
    runs-on: ubuntu-latest
    needs: security-gitleaks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Snyk CLI
        uses: snyk/actions/maven-3-jdk-11@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code (SAST) Scan
        continue-on-error: true
        run: snyk code test --sarif > snyk-code.sarif 

      - name: Snyk Open Source (SCA) Monitor
        continue-on-error: true
        run: snyk monitor --all-projects 

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

  deploy:
    runs-on: ubuntu-latest
    needs: security-snyk
    environment:
      name: Production
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    outputs:
      webapp-url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'JavaApp'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_351F75D8CBD7433EBC5CFE08EDC10150 }}
          package: '*.jar'

  security-dast:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run ZAP Baseline DAST Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ needs.deploy.outputs.webapp-url }}
        continue-on-error: true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html
